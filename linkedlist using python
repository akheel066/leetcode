You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


program:
#Definition for singly-linked list.
class ListNode:
     def __init__(self, val=0, next=None):
         self.val = val
         self.next = next
class Solution:
    def __init__(self):
        self.head=ListNode()
    def append(self,data):
        newnode=ListNode(data)
        cur=self.head
        while cur.next!=None:
            cur=cur.next
        cur.next=newnode
        
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        s1=''
        s2=''
        temp=l1
        while temp:
            s1+=str(temp.val)
            temp=temp.next
        temp=l2
        while temp:
            s2+=str(temp.val)
            temp=temp.next
        print(s1,s2)
        s1=s1[::-1]
        s2=s2[::-1]
        s3=str(int(s1)+int(s2))
        s3=s3[::-1]
        for i in s3:
            self.append(int(i))
        return self.head.next
